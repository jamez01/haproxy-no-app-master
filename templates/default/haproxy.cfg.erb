 # maximum number of simultaneous active connections from an upstream web server
  ulimit-n 655350
  maxconn 65535

  # Logging to syslog facility local0
  # log   127.0.0.1       local0

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  #debug

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Use the leastconn algorithm (SD-3698)
  balance leastconn

  # Maximum number of simultaneous active connections from an upstream web server
  # per service
  maxconn 65535

  # Log details about HTTP requests
  option httplog

  # Abort request if client closes its output channel while waiting for the
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # Support Keep-Alive connections on the client side only while closing the
  # connection on the server side.
  option http-server-close

  # Insert the X-Forwarded-For header for requests sent to the backend.
  option forwardfor

  # If sending a request to one Mongrel fails, try to send it to another, 3 times
  # before aborting the request
  retries 3

  # Do not enforce session affinity (i.e., an HTTP session can be served by
  # any Mongrel, not just the one that started the session
  option redispatch

  # Timeout a request if the client did not read any data for 120 seconds
  timeout client 120000

  # Timeout a request if Mongrel does not accept a connection for 120 seconds
  timeout connect 120000

  # Timeout a request if Mongrel does not accept the data on the connection,
  # or does not send a response back in 120 seconds
  timeout server 120000

  # Timeout Keep-Alive connections after 5 seconds
  timeout http-keep-alive 5000

  # Remove the server from the farm gracefully if the health check URI returns
  # a 404. This is useful for rolling restarts.
  http-check disable-on-404

  # Enable the statistics page
  stats enable
  stats uri     /haproxy?stats
  stats realm   Haproxy\ Statistics
  stats auth    <%= @haproxy_user %>:<%= @haproxy_pass %>

  # Create a monitorable URI which returns a 200 if haproxy is up
  monitor-uri /haproxy/monitor

  # Specify the HTTP method and URI to check to ensure the server is alive.
  # option httpchk GET /pulse

  # Amount of time after which a health check is considered to have timed out
  timeout check 2000

  # Errorfile
  # Return a file contents instead of errors generated by HAProxy

  errorfile 400 /etc/haproxy/errorfiles/400.http
  errorfile 403 /etc/haproxy/errorfiles/403.http
  errorfile 408 /etc/haproxy/errorfiles/408.http
  errorfile 500 /etc/haproxy/errorfiles/500.http
  errorfile 502 /etc/haproxy/errorfiles/502.http
  errorfile 503 /etc/haproxy/errorfiles/503.http
  errorfile 504 /etc/haproxy/errorfiles/504.http

listen cluster :<%= @http_bind_port %>
<% if @httpchk_path -%>
  option httpchk HEAD <%= @httpchk_path %><% if @httpchk_host %> HTTP/1.1\r\nHost:\ <%= @httpchk_host %><% end %>
<% end -%>
  reqadd X-Forwarded-Proto:\ http

  <% @backends.each_with_index do |instance, i| %>
    <% next if instance['role'] == 'app_master' %>
  server app-<%= i %> <%= instance['private_hostname'] %>:81 check inter 5000 fastinter 1000 fall 1 weight 50 # <%= instance['id'] %>
  <% end %>

listen clusterssl :<%= @https_bind_port %>
  mode tcp
  <% @backends.each_with_index do |instance, i| %>
    <% next if instance['role'] == 'app_master' %>
  server app-<%= i %> <%= instance['private_hostname'] %>:444 check inter 5000 fastinter 1000 fall 1 weight 50 # <%= instance['id'] %>
<% end %>
